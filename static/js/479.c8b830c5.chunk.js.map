{"version":3,"file":"static/js/479.c8b830c5.chunk.js","mappings":"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","sources":["pages/Posts/PostsPage/PostsPage.tsx"],"sourcesContent":["import React, {useCallback, useEffect, useRef, useState} from 'react';\r\nimport {useAppDispatch} from \"redux/reduxStore\";\r\nimport {handlingGetAllPosts, handlingAddPosts} from \"redux/Reducers\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n    getActivePostPage,\r\n    getCurrentFilter,\r\n    getFetching, getMyPosts, getMyTabPickStatus, getMyTotalPosts,\r\n    getPosts,\r\n    getPostsOnPage, getScrollState,\r\n    getTotalCount, getBloggerID, getMe, getAuthorTabPickStatus\r\n} from \"redux/Selectors\";\r\nimport Scrollbar from \"react-scrollbars-custom\";\r\nimport {PostList, PostsSidebar} from 'pages/Posts';\r\nimport {ScrollState} from 'typings';\r\nimport {postActions} from \"redux/Actions\";\r\n\r\n\r\n\r\nconst PostsPage = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const posts = useSelector(getPosts)\r\n    const myPosts = useSelector(getMyPosts)\r\n    const myTotalPosts = useSelector(getMyTotalPosts)\r\n    const totalCount = useSelector(getTotalCount)\r\n    const isScrollTop = useSelector(getScrollState)\r\n    const postsOnPage = useSelector(getPostsOnPage)\r\n    const activePage = useSelector(getActivePostPage)\r\n    const isFetching = useSelector(getFetching)\r\n    const isAuthorTabPicked = useSelector(getAuthorTabPickStatus)\r\n    const isMyTabPicked = useSelector(getMyTabPickStatus)\r\n    const id = useSelector(getBloggerID)\r\n    const isAuth = useSelector(getMe)\r\n    const searchFilter = useSelector(getCurrentFilter)\r\n    const [isDataLoading, setDataLoading] = useState(false)\r\n    const [isPopularFilter, setPopularFilter] = useState(false)\r\n    const scrollbarRef = useRef<Scrollbar & HTMLDivElement>(null)\r\n\r\n\r\n\r\n    const isPagesLast = Math.abs(Math.ceil(totalCount!/postsOnPage) - activePage) < 1\r\n\r\n    const nextPage = activePage + 1\r\n\r\n    useEffect(() => {\r\n        if(!isAuthorTabPicked && !isMyTabPicked) {\r\n            loadAllPosts()\r\n        }\r\n        return () => {\r\n            dispatch(postActions.addSearchFilter(null))\r\n            dispatch(postActions.pickAuthorTab(false))\r\n        }\r\n    },[])\r\n\r\n   useEffect(() => {\r\n\r\n       if(isScrollTop){\r\n           scrollbarRef?.current?.scrollToTop()\r\n       }\r\n   }, [posts])\r\n\r\n    useEffect(() => {\r\n        if(isDataLoading){\r\n                dispatch(postActions.setScrollToTop(false))\r\n                dispatch(handlingAddPosts(nextPage, postsOnPage, searchFilter, isPopularFilter)).then(()=>{\r\n                    setDataLoading(false)\r\n                })\r\n\r\n        }\r\n    },[isDataLoading])\r\n\r\n\r\n    const loadMyPosts = useCallback(() => {\r\n        dispatch(postActions.setAllPosts(myPosts))\r\n        dispatch(postActions.setTotalPosts(myTotalPosts))\r\n        dispatch(postActions.setActivePostPage(1))\r\n        setPopularFilter(false)\r\n        scrollbarRef?.current?.scrollToTop()\r\n    },[myPosts, myTotalPosts])\r\n\r\n    const loadAllPosts = useCallback(() => {\r\n        dispatch(handlingGetAllPosts())\r\n        setPopularFilter(false)\r\n        scrollbarRef?.current?.scrollToTop()\r\n    },[posts])\r\n\r\n    const loadPopularPosts = useCallback(() => {\r\n        dispatch(handlingGetAllPosts(null,true))\r\n        setPopularFilter(true)\r\n        scrollbarRef?.current?.scrollToTop()\r\n    },[posts])\r\n\r\n\r\n    const isScrollState = (eventOrState: React.UIEvent<HTMLDivElement, UIEvent> | ScrollState):eventOrState is ScrollState => {\r\n        return 'clientHeight' in eventOrState;\r\n    }\r\n    const scrollHandler = (state: React.UIEvent<HTMLDivElement, UIEvent> | ScrollState) => {\r\n        if (isScrollState(state)) {\r\n            if(state.scrollHeight - (state.scrollTop + state.clientHeight) < 120\r\n                && !isPagesLast)\r\n                setDataLoading(true)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n                <div className=\"all-posts\">\r\n                    <PostsSidebar loadMyPosts={loadMyPosts}\r\n                                  loadAllPosts={loadAllPosts}\r\n                                  loadPopularPosts={loadPopularPosts}\r\n                                  isAuthorTabPicked={isAuthorTabPicked}\r\n                                  isAuth={isAuth}\r\n                                  isMyTabPicked={isMyTabPicked}\r\n                    />\r\n                    <Scrollbar  ref={scrollbarRef} onScroll={scrollHandler} >\r\n                        <PostList posts={posts} id={id} isFetching={isFetching}/>\r\n                    </Scrollbar>\r\n                </div>\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default PostsPage;"],"names":["dispatch","useAppDispatch","posts","useSelector","getPosts","myPosts","getMyPosts","myTotalPosts","getMyTotalPosts","totalCount","getTotalCount","isScrollTop","getScrollState","postsOnPage","getPostsOnPage","activePage","getActivePostPage","isFetching","getFetching","isAuthorTabPicked","getAuthorTabPickStatus","isMyTabPicked","getMyTabPickStatus","id","getBloggerID","isAuth","getMe","searchFilter","getCurrentFilter","useState","isDataLoading","setDataLoading","isPopularFilter","setPopularFilter","scrollbarRef","useRef","isPagesLast","Math","abs","ceil","nextPage","useEffect","loadAllPosts","postActions","current","scrollToTop","handlingAddPosts","then","loadMyPosts","useCallback","handlingGetAllPosts","loadPopularPosts","className","ref","onScroll","state","scrollHeight","scrollTop","clientHeight"],"sourceRoot":""}