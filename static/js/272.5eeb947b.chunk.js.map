{"version":3,"file":"static/js/272.5eeb947b.chunk.js","mappings":"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","sources":["pages/Users/UserList.tsx","pages/Users/Users.tsx","pages/Users/UsersContainer.tsx"],"sourcesContent":["import React, {LegacyRef} from 'react';\r\nimport {Button as AntButton, List, Skeleton, Tooltip} from \"antd\";\r\nimport {GradientCharAvatar} from \"components/CustomAvatars\";\r\nimport {CommentOutlined, UserAddOutlined, UserDeleteOutlined} from \"@ant-design/icons\";\r\nimport {UserType} from \"typings\";\r\nimport {Link} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    handlingFollow: (user: number) => void\r\n    handlingUnfollow: (user: number) => void\r\n    followInProcess: Array<number>\r\n    loadMoreData: () => void\r\n    isPagesLast: boolean\r\n    openDialog: (id: number) => void\r\n    isFetching: boolean\r\n    usersRef: LegacyRef<HTMLDivElement>\r\n\r\n}\r\n\r\n\r\nexport const UserList: React.FC<PropsType> = ({users,   loadMoreData, isFetching, isPagesLast, openDialog, followInProcess, handlingFollow, handlingUnfollow, usersRef }) => {\r\n\r\n\r\n    const ItemList = ({item}: {item: UserType}) => {\r\n        return <>\r\n            <List.Item.Meta\r\n                avatar={<Link to={\"/profile/\" + item.id}><GradientCharAvatar avatarUrl={item.photos.small} name={item.name}/></Link>}\r\n                title={<Link to={\"/profile/\" + item.id}>{item.name}</Link>}\r\n                description={item.status}\r\n            />\r\n            <Tooltip title=\"Открыть диалог\">\r\n                <CommentOutlined className=\"icon\" onClick={e => openDialog(item.id)}/>\r\n            </Tooltip>\r\n            {!item.followed\r\n                ? <Tooltip title=\"Добавить в друзья\">\r\n                    <AntButton className=\"users__find-button\" shape=\"circle\"\r\n                               icon={<UserAddOutlined className=\"icon\"/>} size=\"large\"\r\n                               disabled={followInProcess.some(el => el === item.id)}\r\n                               onClick={() => {\r\n                                   handlingFollow(item.id)\r\n                               }}/>\r\n                </Tooltip>\r\n                : <Tooltip title=\"Удалить из друзей\">\r\n                    <AntButton className=\"users__find-button\" shape=\"circle\"\r\n                               icon={<UserDeleteOutlined className=\"icon\"/>} size=\"large\"\r\n                               disabled={followInProcess.some(el => el === item.id)}\r\n                               onClick={() => {\r\n                                   handlingUnfollow(item.id)\r\n                               }}/>\r\n                </Tooltip>}\r\n        </>\r\n    }\r\n\r\n        return (\r\n            <div\r\n                id=\"scrollableDiv\"\r\n                className=\"users__find-content\"\r\n                ref={usersRef}\r\n            >\r\n                    <List\r\n                        dataSource={users}\r\n                        renderItem={item => (\r\n                            <List.Item key={item.id}>\r\n                                <Skeleton loading={isFetching} active avatar>\r\n                                    <ItemList item={item}/>\r\n                                </Skeleton>\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n            </div>\r\n        );\r\n};\r\n\r\n","import React, {LegacyRef, memo} from \"react\"\r\nimport 'pages/Users/Users.scss'\r\nimport {UserType,FilterType} from \"typings\";\r\nimport { handlingAddUsers, startDialogWithFriend} from \"redux/Reducers\";\r\nimport {Pagination} from \"antd\";\r\nimport {useAppDispatch} from \"redux/reduxStore\";\r\nimport {UserSearchForm} from \"components/Forms\";\r\nimport {useNavigate} from \"react-router\";\r\nimport {UserList} from \"pages/Users\";\r\n\r\n\r\ntype PropsType = {\r\n    totalUsers: number\r\n    usersOnPage: number\r\n    activePage: number\r\n    getUsersOnPage: (n:number, usersOnPage: number) => void\r\n    users: Array<UserType>\r\n    handlingFollow: (user: number) => void\r\n    handlingUnfollow: (user: number) => void\r\n    followInProcess: Array<number>\r\n    handlingFilteredUsers: (filter:FilterType) => void\r\n    searchFilter: FilterType\r\n    isFetching: boolean\r\n    usersRef: LegacyRef<HTMLDivElement>\r\n}\r\n\r\n\r\nexport const Users: React.FC<PropsType> = memo(({totalUsers, handlingFilteredUsers, usersOnPage, activePage, getUsersOnPage, users,searchFilter, handlingFollow, handlingUnfollow, followInProcess, isFetching, usersRef }) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const navigate = useNavigate()\r\n    const nextPage = activePage + 1\r\n    const isPagesLast = Math.abs(totalUsers/usersOnPage - activePage) < 2\r\n\r\n    const loadMoreData = () => {\r\n        dispatch(handlingAddUsers(nextPage, usersOnPage, searchFilter))\r\n    }\r\n    const openDialog = (id: number) =>{\r\n        dispatch(startDialogWithFriend(id))\r\n        let path = `/dialogs/${id}`\r\n        navigate(path)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"users\">\r\n            <div className=\"users__find\">\r\n                <UserSearchForm handlingFilteredUsers={handlingFilteredUsers}/>\r\n                         <UserList users={users}\r\n                                    handlingFollow={handlingFollow}\r\n                                    handlingUnfollow={handlingUnfollow}\r\n                                    followInProcess={followInProcess}\r\n                                    loadMoreData={loadMoreData}\r\n                                    isPagesLast={isPagesLast}\r\n                                    openDialog={openDialog}\r\n                                    isFetching={isFetching}\r\n                                   usersRef={usersRef}\r\n                        />\r\n\r\n                <div className=\"users__find-paginator\">\r\n                    <Pagination\r\n                        showSizeChanger={false}\r\n                        defaultCurrent={1}\r\n                        current={activePage}\r\n                        total={totalUsers}\r\n                        onChange={getUsersOnPage}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import {connect, useDispatch} from \"react-redux\";\r\nimport {Users} from \"pages/Users\";\r\nimport {\r\n    handlingAddUsers,\r\n    handlingFollowAction,\r\n    handlingUnfollowAction,\r\n    handlingUsers,\r\n} from \"redux/Reducers\";\r\nimport React, {ComponentType, useEffect, useRef} from \"react\";\r\nimport {withRedirectIfNoAuth} from \"components/HOC\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getActivePage,\r\n    getFollowInProcess,\r\n    getIsFetching,\r\n    getSearchFilter,\r\n    getTotalUsers,\r\n    getUsers,\r\n    getUsersOnPage\r\n} from \"redux/Selectors\";\r\nimport {UserType, FilterType} from \"typings\";\r\nimport {AppStateType} from \"redux/reduxStore\";\r\nimport {useSearchParams} from \"react-router-dom\";\r\nimport { userActions } from \"redux/Actions\";\r\n//todo перерисовка всей страницы из-за изменения роута\r\n\r\ntype StatePropsType = {\r\n    users: Array<UserType>\r\n    totalUsers: number\r\n    usersOnPage: number\r\n    activePage: number\r\n    isFetching: boolean\r\n    followInProcess: Array<number>\r\n    searchFilter: FilterType\r\n\r\n}\r\ntype DispatchPropsType = {\r\n    handlingFollowAction: (user: number) => void\r\n    handlingUnfollowAction: (user: number) => void\r\n    handlingUsers: (activePage: number, usersOnPage: number, filter: FilterType) => void\r\n    handlingAddUsers: (activePage: number, usersOnPage: number, filter: FilterType) => void\r\n}\r\n\r\nfunction UsersContainer(props: StatePropsType & DispatchPropsType) {\r\n\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams()\r\n    const dispatch = useDispatch()\r\n    const usersRef = useRef<HTMLDivElement>(null)\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const {activePage, usersOnPage,searchFilter} = props\r\n        const parsedTerm = searchParams.get(\"term\")\r\n        const parsedFriend = searchParams.get(\"friend\")\r\n        const parsedPage = searchParams.get(\"page\")\r\n\r\n        let actualPage = activePage\r\n        let actualFilter = searchFilter\r\n\r\n        if(parsedPage) actualPage = +parsedPage\r\n        if(parsedTerm) actualFilter = {...actualFilter, term: parsedTerm}\r\n        if(parsedFriend) actualFilter = {...actualFilter, friend: parsedFriend === \"null\" ? null : parsedFriend === \"true\"}\r\n\r\n        props.handlingUsers(actualPage,usersOnPage, actualFilter)\r\n\r\n        return () => {\r\n            dispatch(userActions.setActivePage(1))\r\n            dispatch(userActions.filterSettings({term:'', friend: null}))\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n\r\n        const {searchFilter, activePage} = props\r\n        const query:{term?: string, friend?: string, page?: string} = {}\r\n\r\n        if(searchFilter.term) query.term = searchFilter.term\r\n        if(searchFilter.friend !== null) query.friend = String(searchFilter.friend)\r\n        if(activePage !== 1) query.page = String(activePage)\r\n\r\n        setSearchParams(query)\r\n\r\n    },[props.searchFilter, props.activePage])\r\n\r\n\r\n    const getUsersOnPage = (n: number, usersOnPage: number ) => {\r\n        const {searchFilter} = props\r\n        usersRef.current?.scrollTo(0, 0)\r\n        props.handlingUsers(n,usersOnPage, searchFilter)\r\n    }\r\n    const handlingFilteredUsers = (filter:FilterType) => {\r\n        const {usersOnPage} = props\r\n        props.handlingUsers(1,usersOnPage, filter)\r\n    }\r\n    return (\r\n            <Users totalUsers={props.totalUsers}\r\n                    usersOnPage={props.usersOnPage}\r\n                    activePage={props.activePage}\r\n                    users={props.users}\r\n                    followInProcess={props.followInProcess}\r\n                    getUsersOnPage={getUsersOnPage}\r\n                    handlingFollow={props.handlingFollowAction}\r\n                    handlingUnfollow={props.handlingUnfollowAction}\r\n                    handlingFilteredUsers={handlingFilteredUsers}\r\n                    searchFilter={props.searchFilter}\r\n                    isFetching={props.isFetching}\r\n                   usersRef={usersRef}\r\n            />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):StatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        totalUsers: getTotalUsers(state),\r\n        usersOnPage: getUsersOnPage(state),\r\n        activePage: getActivePage(state),\r\n        isFetching: getIsFetching(state),\r\n        followInProcess: getFollowInProcess(state),\r\n        searchFilter: getSearchFilter(state)\r\n    }\r\n}\r\nexport default compose<ComponentType>(\r\n    withRedirectIfNoAuth,\r\n    connect<StatePropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {handlingUsers, handlingAddUsers , handlingFollowAction, handlingUnfollowAction})\r\n)(UsersContainer)\r\n\r\n"],"names":["UserList","users","isFetching","loadMoreData","openDialog","isPagesLast","followInProcess","handlingFollow","handlingUnfollow","usersRef","ItemList","item","avatar","to","id","avatarUrl","photos","small","name","title","description","status","CommentOutlined","className","onClick","e","followed","shape","icon","UserDeleteOutlined","size","disabled","some","el","UserAddOutlined","ref","dataSource","renderItem","loading","active","Users","memo","totalUsers","handlingFilteredUsers","usersOnPage","activePage","getUsersOnPage","searchFilter","dispatch","useAppDispatch","navigate","useNavigate","nextPage","Math","abs","handlingAddUsers","startDialogWithFriend","path","showSizeChanger","defaultCurrent","current","total","onChange","compose","withRedirectIfNoAuth","connect","state","getUsers","getTotalUsers","getActivePage","getIsFetching","getFollowInProcess","getSearchFilter","handlingUsers","handlingFollowAction","handlingUnfollowAction","props","useSearchParams","searchParams","setSearchParams","useDispatch","useRef","useEffect","parsedTerm","get","parsedFriend","parsedPage","actualPage","actualFilter","term","friend","userActions","query","String","page","n","scrollTo","filter"],"sourceRoot":""}