{"version":3,"file":"static/js/187.02bc852e.chunk.js","mappings":"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","sources":["pages/Login/LoginForm.tsx","utils/validators/getAPIKey.ts","pages/Login/LoginPageContainer.tsx","pages/Login/LoginPage.tsx"],"sourcesContent":["import {LockOutlined, ReloadOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {Button, Form, Input} from 'antd';\r\nimport React, {useEffect} from 'react';\r\nimport {FormikProps, withFormik} from \"formik\";\r\nimport 'pages/Login/Login.scss'\r\nimport {ThunkDialogType,ThunkBlogType} from 'redux/Reducers';\r\nimport {openNotification} from 'utils/notifications/notificationTop';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {GlowingEnterButton} from \"components/CustomButtons/GlowingEnterButton\";\r\nimport {getAPIKey} from \"utils/validators/getAPIKey\";\r\nimport {authActions} from \"redux/Actions\";\r\n\r\n\r\ninterface FormValues {\r\n    email: string;\r\n    password: string;\r\n    remember: boolean\r\n    captcha:string\r\n}\r\n\r\ninterface OtherProps {\r\n    captcha: string | null\r\n    error: string | null\r\n    askForCaptcha: () => ThunkDialogType\r\n    sendAuthDataOnServ: (email:string, password:string, remember:boolean, captcha:string, APIKey:string) => ThunkDialogType\r\n    handlingBlogUserAuth: (email:string, password:string) => ThunkBlogType\r\n    isFetching: boolean\r\n}\r\nconst LoginForm = (props: OtherProps & FormikProps<FormValues>) => {\r\n    const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n    } = props\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(props.error) {\r\n            openNotification(\"error\",\"top\", props.error,`Проверьте правильность вводимых данных`)\r\n            dispatch(authActions.deleteIncorrectData())\r\n        }\r\n    }, [props.error])\r\n\r\n    return (\r\n            <Form onFinish={handleSubmit}>\r\n                <Form.Item\r\n                    validateStatus={!touched.email ? \"\" : errors.email ? \"error\" : \"success\"}\r\n                    hasFeedback\r\n                    help={!touched.email ? \"\" : errors.email}\r\n                >\r\n                    <Input size=\"large\"\r\n                           name=\"email\"\r\n                           onChange={handleChange}\r\n                           onBlur={handleBlur}\r\n                           prefix={<UserOutlined\r\n                               className=\"site-form-item-icon\" />}\r\n                           placeholder=\"Username\"\r\n                           value={values.email}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    validateStatus={!touched.password ? \"\" : errors.password ? \"error\" : \"success\"}\r\n                    help={!touched.password ? \"\" : errors.password}\r\n                >\r\n                    <Input\r\n                        size=\"large\"\r\n                        name=\"password\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={values.password}\r\n                    />\r\n\r\n                </Form.Item>\r\n                <Form.Item\r\n                    validateStatus={!touched.captcha ? \"\" : errors.captcha ? \"error\" : \"success\"}\r\n                    help={!touched.captcha ? \"\" : errors.captcha}\r\n\r\n                >\r\n                    {props.captcha && <div className=\"captchaBlock\">\r\n                        <Input\r\n                            size=\"large\"\r\n                            name=\"captcha\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            placeholder=\"captcha\"\r\n                            value={values.captcha}\r\n                        />\r\n                        <Button onClick={props.askForCaptcha} className=\"captchaBlock__button\" shape=\"circle\" icon={<ReloadOutlined />} />\r\n                        <img src={props.captcha}/>\r\n                    </div>}\r\n                </Form.Item>\r\n                {/*<Form.Item valuePropName=\"checked\" noStyle>\r\n                    <Checkbox name=\"remember\">Remember me</Checkbox> //пока по умолчанию запоминать auth\r\n                </Form.Item>*/}\r\n                <Form.Item>\r\n                    <GlowingEnterButton sizeX={100} disabled={props.isFetching}/>\r\n                </Form.Item>\r\n            </Form>\r\n    );\r\n};\r\nexport const LoginFormWithFormik = withFormik<OtherProps, FormValues>({\r\n\r\n    validate: (values, props) => {\r\n        const errors:{email?: string, password?: string, captcha?: string} = {};\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (\r\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        ) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n        if (!values.password) {\r\n            errors.password = 'Required'\r\n        }\r\n        if(props.captcha && !values.captcha) {\r\n            errors.captcha = 'Required'\r\n        }\r\n        return errors;\r\n    },\r\n\r\n    handleSubmit: (values, { setSubmitting, props }) => {\r\n\r\n        const APIKey = getAPIKey(values.email)\r\n\r\n        props.sendAuthDataOnServ(values.email, values.password, true,values.captcha, APIKey)\r\n        props.handlingBlogUserAuth(values.email, values.password)\r\n        setTimeout(() => {\r\n            setSubmitting(false);\r\n        }, 1000);\r\n    }\r\n})(LoginForm);\r\n","export const getAPIKey = (value:string) => {\r\n    switch(value){\r\n        case 'batm1ks@mail.ru': return '54324abc-85b8-4e66-9338-c1af345ca7dc'\r\n        case 'diecnc@yandex.ru': return 'fd4ca5d8-d6c6-4455-a6f0-9223d3ba2b4d'\r\n        case 'batm1x1@gmail.com': return '340cff0d-c6af-4cab-ad3e-1d7e1fbb29f6'\r\n        case 'waxopi7749@zfobo.com': return '6f8432f3-fe36-4304-842c-4117d261f09b'\r\n        case 'norowo8255@edxplus.com': return '3cb27ece-7074-4bcc-828d-409589c818b6'\r\n        default: return 'fd4ca5d8-d6c6-4455-a6f0-9223d3ba2b4d'\r\n    }\r\n}\r\n","import {connect} from \"react-redux\";\r\nimport {\r\n    askForCaptcha,\r\n    sendAuthDataOnServ,\r\n    handlingBlogUserAuth,\r\n    ThunkBlogType,\r\n    ThunkAuthType\r\n} from \"redux/Reducers\";\r\nimport {AppStateType} from \"redux/reduxStore\";\r\nimport { compose } from \"redux\";\r\nimport { ComponentType } from \"react\";\r\nimport {LoginPage} from \"pages/Login\";\r\n\r\n\r\n\r\nexport type StatePropsLoginType ={\r\n    isAuth: boolean\r\n    captcha: string | null\r\n    error: string | null\r\n    isFetching: boolean\r\n}\r\nexport type DispatchPropsLoginType = {\r\n    sendAuthDataOnServ: (email:string, password:string, rememberMe:boolean, captcha:string, APIKey:string) => ThunkAuthType\r\n    askForCaptcha: () => ThunkAuthType\r\n    handlingBlogUserAuth: (email:string, password:string) => ThunkBlogType\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): StatePropsLoginType  => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captcha: state.auth.captcha,\r\n        error: state.auth.error,\r\n        isFetching: state.auth.isFetching\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(connect<StatePropsLoginType, DispatchPropsLoginType, {}, AppStateType>(mapStateToProps, {sendAuthDataOnServ, askForCaptcha, handlingBlogUserAuth}))(LoginPage)\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport \"pages/Login/Login.scss\"\r\nimport {LoginFormWithFormik} from \"pages/Login\";\r\nimport {DispatchPropsLoginType, StatePropsLoginType} from \"pages/Login/LoginPageContainer\";\r\nimport {Navigate} from \"react-router\";\r\nimport {useAppDispatch} from \"redux/reduxStore\";\r\nimport {appActions} from \"redux/Actions\";\r\n\r\n\r\n\r\nexport const LoginPage: React.FC<StatePropsLoginType & DispatchPropsLoginType> = ({handlingBlogUserAuth, sendAuthDataOnServ, isAuth, askForCaptcha, captcha, error, isFetching}) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(appActions.setRedirectToLogin(true))\r\n        return () => {\r\n            dispatch(appActions.setRedirectToLogin(false))\r\n        }\r\n    }, [])\r\n\r\n    if(isAuth) {\r\n        return <Navigate to={\"/profile\"}/>\r\n    }\r\n    return <section className=\"auth\">\r\n        <div className=\"auth__content\">\r\n            <div className=\"auth__top\">\r\n                <h2>Войти в аккаунт</h2>\r\n                <p>Пожалуйста, войдите в свой аккаунт</p>\r\n            </div>\r\n            <div className=\"white-block\">\r\n               <LoginFormWithFormik sendAuthDataOnServ={sendAuthDataOnServ}\r\n                                    handlingBlogUserAuth={handlingBlogUserAuth}\r\n                                    captcha={captcha}\r\n                                    askForCaptcha={askForCaptcha}\r\n                                    error={error}\r\n                                    isFetching={isFetching}\r\n                                    />\r\n            </div>\r\n        </div>\r\n        </section>\r\n}\r\n"],"names":["LoginFormWithFormik","withFormik","validate","values","props","errors","email","test","password","captcha","handleSubmit","setSubmitting","APIKey","value","getAPIKey","sendAuthDataOnServ","handlingBlogUserAuth","setTimeout","touched","handleChange","handleBlur","dispatch","useDispatch","useEffect","error","openNotification","authActions","onFinish","validateStatus","hasFeedback","help","size","name","onChange","onBlur","prefix","UserOutlined","className","placeholder","LockOutlined","type","onClick","askForCaptcha","shape","icon","ReloadOutlined","src","GlowingEnterButton","sizeX","disabled","isFetching","compose","connect","state","isAuth","auth","useAppDispatch","appActions","to"],"sourceRoot":""}