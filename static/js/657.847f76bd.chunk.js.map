{"version":3,"file":"static/js/657.847f76bd.chunk.js","mappings":"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","sources":["components/Skeletons/PostSkeleton.tsx","components/Skeletons/PublicationShortSkeleton.tsx","pages/Posts/Comment/Comment.tsx","utils/Time/isCommentEditable.ts","pages/Posts/PostsPage/PostList.tsx","pages/Posts/Post/PostShorten/PostShorten.tsx","pages/Posts/PostsSidebar/LastComment.tsx","pages/Posts/PostsSidebar/PostTag.tsx","pages/Posts/PostsSidebar/PostsSidebar.tsx","pages/Posts/ProfilePage/PublicationShort.tsx","utils/EditSettings/EditSettings.tsx","utils/Time/CustomTime.tsx"],"sourcesContent":["import React from 'react';\r\nimport {Skeleton, Space} from 'antd';\r\n\r\nexport const PostSkeleton = () => {\r\n    return (\r\n        <div className='post__skeleton'>\r\n            <div className=\"post__skeleton-content\">\r\n                <Skeleton.Image active className='post__skeleton-content-IMG'/>\r\n                <Space>\r\n                    <Skeleton.Avatar active size='large' shape='circle' />\r\n                    <Skeleton.Input active size='small'/>\r\n                </Space>\r\n                <Skeleton className='post__skeleton-content-title' active paragraph={{ rows: 12}}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Skeleton} from 'antd';\r\n\r\nexport const PublicationShortSkeleton = () => {\r\n    return (\r\n        <div className=\"publication\">\r\n            <div className='publication__skeleton'>\r\n                <Skeleton.Image active className='publication__skeleton-img'/>\r\n                <Skeleton className='publication__skeleton-text' active title={{width:'200px'}} paragraph={{ rows: 2,width: [\"100%\",\"100%\"]}}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useState} from 'react';\r\nimport { CloseOutlined, EditOutlined } from '@ant-design/icons';\r\nimport { Input } from 'antd';\r\nimport {CommentsType} from \"typings\";\r\nimport 'pages/Posts/Comment/Comment.scss'\r\nimport {GetMessageTime} from \"utils/Time/CustomTime\";\r\nimport {commentsAPI} from \"api/postsAPI\";\r\nimport {isCommentEditable} from \"utils/Time/isCommentEditable\";\r\n\r\nconst { TextArea} = Input\r\n\r\ntype PropsType = {\r\n    item:CommentsType\r\n    bloggerId:string | null\r\n    getCommentsOfPost: () => void\r\n}\r\nconst Comment:React.FC<PropsType> = ({item, bloggerId, getCommentsOfPost}) => {\r\n\r\n    const [isEditableComment, editComment] = useState(false)\r\n    const [value, setValue] = useState('')\r\n\r\n    const handleDeleteComment = async () => {\r\n        const response = await commentsAPI.deleteComment(item._id)\r\n        if(response.resultCode === 0) {\r\n            getCommentsOfPost()\r\n        }\r\n    }\r\n    const handleEditComment = () => {\r\n        editComment(!isEditableComment)\r\n        if(isEditableComment) {\r\n            setValue('')\r\n        } else setValue(item.text)\r\n    }\r\n    const handleSendEditComment = async () => {\r\n        const response = await commentsAPI.updateComment(value, item._id)\r\n        if(response.resultCode === 0) {\r\n            setValue('')\r\n            getCommentsOfPost()\r\n            editComment(!isEditableComment)\r\n        } else console.log('Что-то пошло не так')\r\n    }\r\n    const editConditions = bloggerId === item.user._id && !isEditableComment && isCommentEditable(item.createdAt)\r\n\r\n    return (\r\n        <div className=\"post__comments-commentWrapper\">\r\n            <div className=\"post-comment\">\r\n                <div className=\"post-avatar\">\r\n                    <img src={item.user.avatarUrl.small as string} alt='ava'/>\r\n                </div>\r\n                <div className=\"nameAndText\">\r\n                    <div className=\"headerOf-comment\">\r\n                        {item.user.fullName}\r\n                        {editConditions && <div>\r\n                            <EditOutlined onClick={handleEditComment}/>\r\n                            <CloseOutlined onClick={handleDeleteComment}/>\r\n                        </div>}\r\n                    </div>\r\n                    {isEditableComment ? <div className=\"input\">\r\n                        <TextArea\r\n                            className=\"message__form-textarea\"\r\n                            size=\"small\"\r\n                            placeholder=\"Введите текст комментария...\"\r\n                            autoSize={{ minRows: 2, maxRows: 6 }}\r\n                            value={value}\r\n                            onChange={e => setValue(e.target.value)}\r\n                        />\r\n                    </div>\r\n                        : <span>{item.text}</span>}\r\n                    <div className='footerOf-comment'>\r\n                        <span>\r\n                            <GetMessageTime date={item.updatedAt} showFullDate/>\r\n                        </span>\r\n                        {isEditableComment && <div className='footerOf-comment-options'>\r\n                            <span onClick={handleSendEditComment}>Сохранить</span>\r\n                            <span onClick={handleEditComment}>Отмена</span>\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comment;","\r\nexport const isCommentEditable = (date: string) => {\r\n    if(date) {\r\n        const isBeingOnlineDateLimit = 500000\r\n        const dateDifference = Date.now() - Date.parse(date)\r\n        return dateDifference < isBeingOnlineDateLimit\r\n    } else {\r\n        return false\r\n    }\r\n}","import React from 'react';\r\nimport {PostType} from \"typings\";\r\nimport {PostSkeleton} from \"components/Skeletons\";\r\nimport { PostShorten } from '..';\r\n\r\n\r\n\r\ntype PropsType = {\r\n    posts:Array<PostType>\r\n    id:string | boolean | null\r\n    isFetching: boolean\r\n}\r\nexport const PostList:React.FC<PropsType> = ({posts,id, isFetching}) => {\r\n\r\n    const SkeletonArray = Array.from({length: 2}).map((_,index) => <PostSkeleton key={'skeleton' + index}/>)\r\n\r\n    if(!posts.length) return <PostSkeleton />\r\n\r\n    return (\r\n    <>\r\n            {isFetching ?\r\n                SkeletonArray\r\n                : posts.map((item) => <PostShorten\r\n                key={item._id}\r\n                id={item._id}\r\n                imageUrl={item.imageUrl}\r\n                title={item.title}\r\n                tags={item.tags}\r\n                text={item.text}\r\n                user={item.user}\r\n                createdAt={item.createdAt}\r\n                viewsCount={item.viewsCount}\r\n                commentsCount={item.commentsCount}\r\n                isEditable={item.user._id === id}\r\n                />)}\r\n    </>\r\n    );\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport \"pages/Posts/PostsPage/PostPage.scss\"\r\nimport {Input} from 'antd';\r\nimport {CommentOutlined, EyeOutlined} from '@ant-design/icons';\r\nimport {Link} from \"react-router-dom\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport {AddPost}from \"components/Main\";\r\nimport classnames from 'classnames';\r\nimport EditSettings from \"utils/EditSettings/EditSettings\";\r\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\r\nimport {nightOwl} from 'react-syntax-highlighter/dist/esm/styles/prism'\r\nimport {GetMessageTime} from \"utils/Time/CustomTime\";\r\nimport DefaultImage from 'assets/images/defaultPostImage.jpg'\r\nimport {Tag} from \"pages/Posts\";\r\nimport {PostImgType, PostUserType} from 'typings';\r\n\r\nconst { TextArea } = Input;\r\n//todo: в один компонент сделать инпут?\r\n\r\n\r\ntype PropsType = {\r\n    id: string,\r\n    imageUrl: PostImgType,\r\n    title: string,\r\n    tags: string[],\r\n    text: string,\r\n    viewsCount: number,\r\n    commentsCount: number,\r\n    user: PostUserType,\r\n    createdAt: string,\r\n    isEditable: boolean\r\n}\r\nexport const PostShorten: React.FC<PropsType> = ({id, user, imageUrl, title, tags, text, viewsCount, commentsCount, createdAt,isEditable }) => {\r\n\r\n    const [edit, setEdit] = useState(false)\r\n    const [isTooltipVisible, setTooltipVisible] = useState(false)\r\n\r\n    const editPost = () => {\r\n        setEdit(!edit)\r\n    }\r\n    const handleTooltipVisibility = (boolean: boolean) => {\r\n        setTooltipVisible(boolean)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {edit ? <AddPost  postHandler={editPost} currentPost={{title, text, tags, imageUrl}} id={id} getPostById={null}/>\r\n                : <div className=\"postPreview\">\r\n                <div className={classnames(\"postPreview__main\", {\"postPreview__main-tooltip\": isTooltipVisible})}>\r\n                    <Link to={`/posts/${id}`}>\r\n                        <div className=\"postPreview__main-headerImg\">\r\n                            <img src={imageUrl ? imageUrl.medium : DefaultImage} alt='image' />\r\n                        </div>\r\n                    </Link>\r\n                    <div className=\"postPreview__main-info\">\r\n                        <div className=\"postPreview__main-info-author\">\r\n                            <div className=\"post-avatar\">\r\n                                <img src={user.avatarUrl.small as string} alt=\"ava\"/>\r\n                            </div>\r\n                            <div className=\"postAuthor-name\">\r\n                                <span>{user.fullName}</span>\r\n                                <span>\r\n                                   <GetMessageTime date={createdAt} showFullDate/>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <Link to={`/posts/${id}`}>\r\n                            <div className=\"postPreview__main-info-title\">\r\n                                <h1>{title}</h1>\r\n                            </div>\r\n                            <div className=\"postPreview__main-info-tags\">\r\n                                {tags.map((item, index) => <Tag key={'tag-' + index} item={item}/>)}\r\n                            </div>\r\n                            <div className=\"postPreview__main-info-text\">\r\n                                <ReactMarkdown children={text}\r\n                                               className=\"markdown\"\r\n                                               components={{\r\n                                                   code({node, inline, className, children, ...props}) {\r\n                                                       const match = /language-(\\w+)/.exec(className || '')\r\n                                                       return !inline && match ? (\r\n                                                           <SyntaxHighlighter\r\n                                                               children={String(children).replace(/\\n$/, '')}\r\n                                                               style={nightOwl}\r\n                                                               customStyle={{backgroundColor:\"#2c2f48\", borderRadius:\"15px\"}}\r\n                                                               language={match[1]}\r\n                                                               PreTag=\"div\"\r\n                                                               {...props}\r\n                                                           />\r\n                                                       ) : (\r\n                                                           <code className={className} {...props}>\r\n                                                               {children}\r\n                                                           </code>\r\n                                                       )\r\n                                                   }\r\n                                               }}\r\n                                />\r\n                            </div>\r\n                        </Link>\r\n                        <div className=\"postPreview__main-info-views\">\r\n                            <div style={{display:\"flex\",alignItems: \"center\"}}>\r\n                                <div className=\"views\">\r\n                                    <span><EyeOutlined /></span>\r\n                                    <span>{viewsCount}</span>\r\n                                </div>\r\n                                <div className=\"comments\">\r\n                                    <span><CommentOutlined /></span>\r\n                                    <span>{commentsCount}</span>\r\n                                </div>\r\n                            </div>\r\n                            {isEditable ? <EditSettings editPost={editPost} id={id} handleTooltipVisibility={handleTooltipVisibility}/> : <div></div>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div> }\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {CommentsType} from \"typings\";\r\nimport {GetMessageTime} from \"utils/Time/CustomTime\";\r\n\r\nexport const LastComment = ({item}:{item:CommentsType}) => {\r\n    return (\r\n        <Link to={`/posts/${item.post}`} state={{scrollToBottom: true}}>\r\n        <div className=\"searchPost__comments-list-item  common-card-animation\">\r\n            <div style={{width:'52px'}} className=\"clip-comment-avatar\">\r\n                <img  src={item.user.avatarUrl.small as string} alt='ava'/>\r\n            </div>\r\n            <div className=\"searchPost__comments-list-item-name\">\r\n                <div className=\"headerOf-comment\">\r\n                    <span>{item.user.fullName}</span>\r\n                    <span>\r\n                        <GetMessageTime date={item.createdAt} showFullDate/>\r\n                    </span>\r\n                </div>\r\n                <span>{item.text}</span>\r\n            </div>\r\n        </div>\r\n        </Link>\r\n    );\r\n};\r\n","import React from 'react'\r\n\r\nexport const PostTag = ({item, getPostsWithTag}:{item:string, getPostsWithTag:(item:string) => void}) => {\r\n\r\n    return (\r\n        <li className='tagList-item' onClick={() => getPostsWithTag(item)}>\r\n            #{item}\r\n        </li>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {LastComment, PostTag} from 'pages/Posts';\r\nimport {useAppDispatch} from \"redux/reduxStore\";\r\nimport { handlingGetAllPosts, handlingSetAllPosts} from \"redux/Reducers\";\r\nimport {commentsAPI, postsAPI} from \"api/postsAPI\";\r\nimport Skeleton from 'antd/lib/skeleton/Skeleton';\r\nimport {CommentsType} from \"typings\";\r\nimport {StyledSearch} from 'components/Forms';\r\nimport {Segmented} from 'antd';\r\nimport {SegmentedValue} from 'antd/lib/segmented';\r\nimport {postActions} from \"redux/Actions\";\r\n\r\ntype PropsType= {\r\n    loadPopularPosts: () => void\r\n    loadAllPosts: () => void\r\n    loadMyPosts: () => void\r\n    isAuthorTabPicked: boolean\r\n    isMyTabPicked:boolean\r\n    isAuth: boolean\r\n}\r\nexport const PostsSidebar:React.FC<PropsType> = ({loadPopularPosts, loadAllPosts, loadMyPosts, isAuthorTabPicked, isMyTabPicked, isAuth}) => {\r\n\r\n    const [tags, setTags] = useState<string[] | undefined>(undefined)\r\n    const [comments, setComments] = useState<CommentsType[] | undefined>(undefined)\r\n    const [currentValue, setCurrentValue] = useState(\"Новые\")\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        getTags()\r\n        getComments()\r\n        if(isMyTabPicked)\r\n            handleSegmentChange(\"Мои\")\r\n    }, [])\r\n\r\n\r\n    const getComments = async () => {\r\n        const response = await commentsAPI.getAll()\r\n        setComments(response.data)\r\n    }\r\n    const getTags = async () => {\r\n        const response = await postsAPI.getTags()\r\n        setTags(response.data)\r\n    }\r\n    const searchPosts = (value:string) => {\r\n        dispatch(handlingGetAllPosts(value)).then(() => {\r\n            dispatch(postActions.addSearchFilter(value))\r\n        })\r\n    }\r\n    const newTabHandler = () => {\r\n        loadAllPosts()\r\n        dispatch(postActions.pickAuthorTab(false))\r\n        dispatch(postActions.pickMyTab(false))\r\n    }\r\n    const popTabHandler = () => {\r\n        loadPopularPosts()\r\n        dispatch(postActions.pickAuthorTab(false))\r\n        dispatch(postActions.pickMyTab(false))\r\n    }\r\n    const myTabHandler = () => {\r\n        loadMyPosts()\r\n        dispatch(postActions.pickAuthorTab(false))\r\n        dispatch(postActions.pickMyTab(false))\r\n    }\r\n    const handleSegmentChange = (value:SegmentedValue) => {\r\n        switch (value) {\r\n            case \"Новые\":\r\n                newTabHandler()\r\n                setCurrentValue(\"Новые\")\r\n                break\r\n            case \"Популярные\":\r\n                popTabHandler()\r\n                setCurrentValue(\"Популярные\")\r\n                break\r\n            case \"Мои\":\r\n                myTabHandler()\r\n                setCurrentValue(\"Мои\")\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    const getPostsWithTag = (item:string) => {\r\n        dispatch(handlingSetAllPosts(item))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"searchPost\">\r\n            <div className=\"searchPost__navigation\">\r\n                <Segmented\r\n                    block\r\n                    onChange={handleSegmentChange}\r\n                    defaultValue={\"Новые\"}\r\n                    value={isAuthorTabPicked ? \"Автор\" : isMyTabPicked ? \"Мои\" : currentValue}\r\n                    options={[\r\n                    \"Новые\",\r\n                    \"Популярные\",\r\n                    { label: 'Мои', value: 'Мои', disabled: !isAuth },\r\n                    \"Автор\"\r\n                ]} />\r\n\r\n            </div>\r\n            <div className=\"searchPost__input\">\r\n                <StyledSearch onSearch={searchPosts}/>\r\n            </div>\r\n            <div className=\"searchPost__tagBlock\">\r\n                <span>Популярные тэги</span>\r\n                <div className=\"searchPost__tagBlock-tags\">\r\n\r\n                        {tags\r\n                            ? <ul className='tagList'>\r\n                                {tags.map((item, index) =>\r\n                                    <PostTag\r\n                                        key={'tag-' + index}\r\n                                        item={item}\r\n                                        getPostsWithTag={getPostsWithTag}\r\n                                    />)}\r\n                              </ul>\r\n                            : <Skeleton title={false}\r\n                                        active paragraph={{ rows: 5, width: [\"60%\",\"45%\",\"50%\",\"55%\",\"40%\",]}}/>}\r\n                </div>\r\n            </div>\r\n            <div className=\"searchPost__comments\">\r\n                <span className=\"comments-description\">Последние комментарии</span>\r\n                <div className=\"searchPost__comments-list\">\r\n                    {comments\r\n                        ?\r\n                        comments.map((item) => <LastComment key={item._id} item={item} />)\r\n                        : Array.from({length:5}).map(() =>\r\n                            <div className='skeleton-comment'>\r\n                                <Skeleton.Input active size='large' />\r\n                            </div>\r\n                        )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useRef, useState} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {PostType} from \"typings\";\r\nimport DefaultImage from 'assets/images/defaultPostImage.jpg'\r\nimport { useSpring, animated, config} from '@react-spring/web'\r\n\r\n\r\nconst calc = (x:number, y:number, rect: DOMRect) => [\r\n    -(y - rect.top - rect.height / 2) / 12,\r\n    (x - rect.left - rect.width / 2) / 12,\r\n    1.08\r\n];\r\nconst trans = (x:number, y:number, s:number) =>\r\n    `perspective(1100px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\r\n\r\nexport const PublicationShort = ({item}:{item: PostType}) => {\r\n\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const [xys, set] = useState([0, 0, 1]);\r\n\r\n    const props = useSpring({ xys, config: config.slow });\r\n\r\n    return (\r\n        <animated.div\r\n            ref={ref}\r\n            className=\"publication\"\r\n            style={{ transform: props.xys.to(trans) }}\r\n            onMouseLeave={() => set([0, 0, 1])}\r\n            onMouseMove={(e) => {\r\n                const rect = ref.current?.getBoundingClientRect();\r\n                if(rect) {\r\n                    set(calc(e.clientX, e.clientY, rect));\r\n                }\r\n            }}>\r\n            <Link to={`/posts/${item._id}`}>\r\n                <img src={item.imageUrl.medium ? item.imageUrl.medium : DefaultImage} alt='image'/>\r\n                <div className=\"publication__glass\">\r\n                    <h2>{item.title}</h2>\r\n                    <p>{item.tags.map((item,index)=><Tag key={'tag-' + index} item={item}/>)}</p>\r\n                </div>\r\n            </Link>\r\n        </animated.div>\r\n\r\n    );\r\n};\r\n\r\nexport const Tag = ({item}:{item:string}) => {\r\n    return (\r\n        <span>#{item}</span>\r\n    );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport './EditSettings.scss'\r\nimport {Popover, Tooltip} from \"antd\";\r\nimport {CheckOutlined, CloseOutlined, DeleteOutlined, FormOutlined} from \"@ant-design/icons\";\r\nimport {deletePublication} from \"redux/Reducers\";\r\nimport {useAppDispatch} from \"redux/reduxStore\";\r\nimport {useNavigate} from \"react-router\";\r\n\r\ntype PropsType = {\r\n    editPost: () => void\r\n    id: string\r\n    handleTooltipVisibility: (boolean: boolean) => void\r\n}\r\nconst EditSettings:React.FC<PropsType> = ({editPost, id, handleTooltipVisibility}) => {\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [visibleEditTooltip, setVisibleEditTooltip] = useState(false)\r\n    const [visibleDeleteTooltip, setVisibleDeleteTooltip] = useState(false)\r\n    const dispatch = useAppDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if(visible || visibleEditTooltip || visibleDeleteTooltip) {\r\n            handleTooltipVisibility(true)\r\n        } else handleTooltipVisibility(false)\r\n    },[visible, visibleEditTooltip, visibleDeleteTooltip])\r\n\r\n    const handleVisibleChange = (newVisible: boolean) => {\r\n        setVisibleDeleteTooltip(false)\r\n        setVisible(newVisible)\r\n    }\r\n    const hide = () => {\r\n        setVisible(false)\r\n    }\r\n    const showEditTooltip = (newVisible: boolean) => {\r\n        if(!visible) setVisibleEditTooltip(newVisible)\r\n    }\r\n    const showDeleteTooltip = (newVisible: boolean) => {\r\n        if(!visible) setVisibleDeleteTooltip(newVisible)\r\n    }\r\n    const sendDeleteDataOnServ = () => {\r\n        dispatch(deletePublication(id)).then(() => {\r\n            navigate('/posts')\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"edit\">\r\n                <Tooltip mouseLeaveDelay={0.05}\r\n                         mouseEnterDelay={0.3}\r\n                         visible={visibleEditTooltip}\r\n                         onVisibleChange={showEditTooltip}\r\n                         title=\"Редактировать пост\"\r\n                >\r\n                    <FormOutlined onClick={editPost}/>\r\n                </Tooltip>\r\n                <Tooltip mouseLeaveDelay={0.05}\r\n                         mouseEnterDelay={0.3}\r\n                         visible={visibleDeleteTooltip}\r\n                         onVisibleChange={showDeleteTooltip}\r\n                         title=\"Удалить пост\">\r\n                    <Popover\r\n                        content={\r\n                            <div className=\"popover-options\">\r\n                                <div>\r\n                                    <CheckOutlined style={{color: 'red'}}/>\r\n                                    <a onClick={sendDeleteDataOnServ}>Да</a>\r\n                                </div>\r\n                                <div>\r\n                                    <CloseOutlined style={{color: '#39e324'}}/>\r\n                                    <a onClick={hide}>Нет</a>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        title=\"Вы действительно хотите удалить пост?\"\r\n                        trigger=\"click\"\r\n                        visible={visible}\r\n                        onVisibleChange={handleVisibleChange}\r\n                        color={\"#2c2f48\"}\r\n                        overlayClassName=\"custom-popover\"\r\n                    >\r\n                        <DeleteOutlined  />\r\n                    </Popover>\r\n                </Tooltip>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditSettings;","import React, {Fragment} from 'react';\r\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\r\nimport { enGB, eo, ru } from 'date-fns/locale'\r\nimport isToday from \"date-fns/isToday\";\r\nimport {format} from \"date-fns\";\r\n//для чата, возвращает строковое значение, когда было написано сообщение, н.п. \"меньше минуты назад\"\r\nconst locales = {enGB, eo, ru}\r\n\r\nexport const CustomTimeDistanceToNow: React.FC<{date:string}> = ({date}) => {\r\n    let parsedDate = Date.parse(date) + + 1.08e+7\r\n    return <Fragment>\r\n        Онлайн {formatDistanceToNow(parsedDate, {\r\n            addSuffix: true,\r\n            locale: locales.ru\r\n        })}\r\n    </Fragment>\r\n};\r\nexport const GetMessageTime:React.FC<{date:string, showFullDate:boolean }> = ({date, showFullDate = false}) => {\r\n    let parsedDate\r\n    if(showFullDate) {\r\n        parsedDate = Date.parse(date)\r\n    } else  parsedDate = Date.parse(date) + 1.08e+7\r\n\r\n    if(isToday(parsedDate)) {\r\n        return <Fragment>{format(parsedDate, \"Сегодня в HH:mm\")}</Fragment>\r\n    } else if(showFullDate){\r\n        return <Fragment>{format(parsedDate, \"d.MM.yyyy в HH:mm\")}</Fragment>\r\n    } else {\r\n        return <Fragment>{format(parsedDate, \"d.MM.yyyy\")}</Fragment>\r\n    }\r\n}\r\n"],"names":["PostSkeleton","className","active","size","shape","paragraph","rows","PublicationShortSkeleton","title","width","TextArea","Input","item","bloggerId","getCommentsOfPost","useState","isEditableComment","editComment","value","setValue","handleDeleteComment","commentsAPI","_id","resultCode","handleEditComment","text","handleSendEditComment","console","log","editConditions","user","date","Date","now","parse","isCommentEditable","createdAt","src","avatarUrl","small","alt","fullName","EditOutlined","onClick","CloseOutlined","placeholder","autoSize","minRows","maxRows","onChange","e","target","updatedAt","showFullDate","PostList","posts","id","isFetching","SkeletonArray","Array","from","length","map","_","index","PostShorten","imageUrl","tags","viewsCount","commentsCount","isEditable","edit","setEdit","isTooltipVisible","setTooltipVisible","editPost","postHandler","currentPost","getPostById","classnames","to","medium","DefaultImage","Tag","children","components","code","node","inline","props","match","exec","String","replace","style","nightOwl","customStyle","backgroundColor","borderRadius","language","PreTag","display","alignItems","EyeOutlined","CommentOutlined","EditSettings","handleTooltipVisibility","boolean","LastComment","post","state","scrollToBottom","PostTag","getPostsWithTag","PostsSidebar","loadPopularPosts","loadAllPosts","loadMyPosts","isAuthorTabPicked","isMyTabPicked","isAuth","undefined","setTags","comments","setComments","currentValue","setCurrentValue","dispatch","useAppDispatch","useEffect","getTags","getComments","handleSegmentChange","response","data","postsAPI","postActions","handlingSetAllPosts","block","defaultValue","options","label","disabled","onSearch","handlingGetAllPosts","then","Skeleton","trans","x","y","s","PublicationShort","ref","useRef","xys","set","useSpring","config","animated","transform","onMouseLeave","onMouseMove","rect","current","getBoundingClientRect","top","height","left","calc","clientX","clientY","visible","setVisible","visibleEditTooltip","setVisibleEditTooltip","visibleDeleteTooltip","setVisibleDeleteTooltip","navigate","useNavigate","mouseLeaveDelay","mouseEnterDelay","onVisibleChange","newVisible","FormOutlined","content","CheckOutlined","color","deletePublication","trigger","overlayClassName","DeleteOutlined","locales","enGB","eo","ru","CustomTimeDistanceToNow","parsedDate","Fragment","formatDistanceToNow","addSuffix","locale","GetMessageTime","isToday","format"],"sourceRoot":""}