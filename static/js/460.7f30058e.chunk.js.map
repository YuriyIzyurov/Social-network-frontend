{"version":3,"file":"static/js/460.7f30058e.chunk.js","mappings":"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","sources":["pages/Posts/Comment/Comment.tsx","utils/Time/isCommentEditable.ts","pages/Posts/Post/PostFull/PostFull.tsx","utils/EditSettings/EditSettings.tsx","utils/Time/CustomTime.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { CloseOutlined, EditOutlined } from '@ant-design/icons';\r\nimport { Input } from 'antd';\r\nimport {CommentsType} from \"typings\";\r\nimport 'pages/Posts/Comment/Comment.scss'\r\nimport {GetMessageTime} from \"utils/Time/CustomTime\";\r\nimport {commentsAPI} from \"api/postsAPI\";\r\nimport {isCommentEditable} from \"utils/Time/isCommentEditable\";\r\n\r\nconst { TextArea} = Input\r\n\r\ntype PropsType = {\r\n    item:CommentsType\r\n    bloggerId:string | null\r\n    getCommentsOfPost: () => void\r\n}\r\nconst Comment:React.FC<PropsType> = ({item, bloggerId, getCommentsOfPost}) => {\r\n\r\n    const [isEditableComment, editComment] = useState(false)\r\n    const [value, setValue] = useState('')\r\n\r\n    const handleDeleteComment = async () => {\r\n        const response = await commentsAPI.deleteComment(item._id)\r\n        if(response.resultCode === 0) {\r\n            getCommentsOfPost()\r\n        }\r\n    }\r\n    const handleEditComment = () => {\r\n        editComment(!isEditableComment)\r\n        if(isEditableComment) {\r\n            setValue('')\r\n        } else setValue(item.text)\r\n    }\r\n    const handleSendEditComment = async () => {\r\n        const response = await commentsAPI.updateComment(value, item._id)\r\n        if(response.resultCode === 0) {\r\n            setValue('')\r\n            getCommentsOfPost()\r\n            editComment(!isEditableComment)\r\n        } else console.log('Что-то пошло не так')\r\n    }\r\n    const editConditions = bloggerId === item.user._id && !isEditableComment && isCommentEditable(item.createdAt)\r\n\r\n    return (\r\n        <div className=\"post__comments-commentWrapper\">\r\n            <div className=\"post-comment\">\r\n                <div className=\"post-avatar\">\r\n                    <img src={item.user.avatarUrl.small as string} alt='ava'/>\r\n                </div>\r\n                <div className=\"nameAndText\">\r\n                    <div className=\"headerOf-comment\">\r\n                        {item.user.fullName}\r\n                        {editConditions && <div>\r\n                            <EditOutlined onClick={handleEditComment}/>\r\n                            <CloseOutlined onClick={handleDeleteComment}/>\r\n                        </div>}\r\n                    </div>\r\n                    {isEditableComment ? <div className=\"input\">\r\n                        <TextArea\r\n                            className=\"message__form-textarea\"\r\n                            size=\"small\"\r\n                            placeholder=\"Введите текст комментария...\"\r\n                            autoSize={{ minRows: 2, maxRows: 6 }}\r\n                            value={value}\r\n                            onChange={e => setValue(e.target.value)}\r\n                        />\r\n                    </div>\r\n                        : <span>{item.text}</span>}\r\n                    <div className='footerOf-comment'>\r\n                        <span>\r\n                            <GetMessageTime date={item.updatedAt} showFullDate/>\r\n                        </span>\r\n                        {isEditableComment && <div className='footerOf-comment-options'>\r\n                            <span onClick={handleSendEditComment}>Сохранить</span>\r\n                            <span onClick={handleEditComment}>Отмена</span>\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comment;","\r\nexport const isCommentEditable = (date: string) => {\r\n    if(date) {\r\n        const isBeingOnlineDateLimit = 500000\r\n        const dateDifference = Date.now() - Date.parse(date)\r\n        return dateDifference < isBeingOnlineDateLimit\r\n    } else {\r\n        return false\r\n    }\r\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport \"pages/Posts/Post/PostFull/PostFull.scss\"\r\nimport {CommentOutlined, EyeOutlined} from '@ant-design/icons';\r\nimport {Scrollbar} from 'react-scrollbars-custom';\r\nimport {useLocation, useParams} from \"react-router\";\r\nimport {commentsAPI, postsAPI} from \"api/postsAPI\";\r\nimport {CommentsType, PostType} from \"typings\";\r\nimport ReactMarkdown from 'react-markdown';\r\nimport {useSelector} from \"react-redux\";\r\nimport {getBloggerID} from \"redux/Selectors\";\r\nimport EditSettings from \"utils/EditSettings/EditSettings\";\r\nimport Comment from \"pages/Posts/Comment/Comment\";\r\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\r\nimport {nightOwl} from 'react-syntax-highlighter/dist/esm/styles/prism'\r\nimport {SendComment} from 'components/Forms';\r\nimport { AddPost } from 'components/Main';\r\nimport {Spin} from \"antd\";\r\nimport {GetMessageTime} from \"utils/Time/CustomTime\";\r\n\r\nconst PostFull = () => {\r\n\r\n    const [edit, setEdit] = useState(false)\r\n    const [isTooltipVisible, setTooltipVisible] = useState(false)\r\n    const [post, setPost] = useState<PostType | undefined>(undefined);\r\n    const [comments, setComments] = useState<CommentsType[] | undefined>(undefined);\r\n    const scrollbarRef = useRef<Scrollbar & HTMLDivElement>(null)\r\n    const id = useSelector(getBloggerID)\r\n    const params = useParams()\r\n    const location = useLocation()\r\n\r\n    const {state} = location\r\n\r\n    const getPostById = async () => {\r\n        const response = await postsAPI.getPostById(params.id)\r\n        setPost(response.data)\r\n    }\r\n    const getCommentsOfPost = async () => {\r\n            const response = await commentsAPI.getAllCommentsOfPost(params.id)\r\n            setComments(response.data)\r\n\r\n    }\r\n    useEffect(() => {\r\n        getPostById()\r\n            .then(() => getCommentsOfPost())\r\n            .then(() => {\r\n                getCommentsOfPost()\r\n                if(state) {\r\n                    scrollbarRef.current?.scrollToBottom()\r\n                }\r\n            })\r\n    }, [])\r\n\r\n\r\n    const editPost = () => {\r\n        setEdit(!edit)\r\n    }\r\n    const handleTooltipVisibility = (boolean: boolean) => {\r\n        setTooltipVisible(boolean)\r\n    }\r\n    const sendComment = async (value: string) => {\r\n        if(post){\r\n            const response = await commentsAPI.writeComment(post._id, value)\r\n            if(response.resultCode === 0) {\r\n                getCommentsOfPost()\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!post) {\r\n        return (\r\n            <div className='main-spin'>\r\n                <Spin  size=\"large\" />\r\n            </div>\r\n        )\r\n    }\r\n    if(edit) {\r\n        const {title, text, tags, imageUrl} = post\r\n        return  <AddPost  postHandler={editPost} currentPost={{title, text, tags, imageUrl}} id={post._id} getPostById={getPostById} />\r\n    }\r\n    return (\r\n        <Scrollbar ref={scrollbarRef}>\r\n        <div className=\"post\">\r\n            <div className=\"post__main\">\r\n                {post.imageUrl.original\r\n                    ?\r\n                    <div className=\"post__main-headerImg\">\r\n                    <img src={post.imageUrl.original} alt='image'/>\r\n                </div>\r\n                    :\r\n                    <div></div>}\r\n                    <div className=\"post__main-info\">\r\n                        <div className=\"post__main-info-author\">\r\n                            <div style={{display: \"flex\"}}>\r\n                                <div className=\"post-avatar\">\r\n                                    {post.user.avatarUrl\r\n                                        ?\r\n                                        <img src={post.user.avatarUrl.small as string} alt=\"User\"/>\r\n                                        :\r\n                                        <img src=\"https://bipbap.ru/wp-content/uploads/2021/07/9-1.jpeg\" alt='User'/>}\r\n                                </div>\r\n                                <div className=\"name\">\r\n                                    <span>{post.user.fullName}</span>\r\n                                    <span><GetMessageTime date={post.createdAt} showFullDate/></span>\r\n                                </div>\r\n                            </div>\r\n                            {id === post.user._id && <EditSettings editPost={editPost} id={post._id}\r\n                                           handleTooltipVisibility={handleTooltipVisibility}/>}\r\n                        </div>\r\n                        <div className=\"post__main-info-title\">\r\n                            <h1>{post.title}</h1>\r\n                        </div>\r\n                        <div className=\"post__main-info-tags\">\r\n                            {post.tags.map((item) => <span>#{item}</span> )}\r\n                        </div>\r\n                        <div className=\"post__main-info-text\">\r\n                            <ReactMarkdown children={post.text}\r\n                                           className=\"markdown\"\r\n                                           components={{\r\n                                               code({node, inline, className, children, ...props}) {\r\n                                                   const match = /language-(\\w+)/.exec(className || '')\r\n                                                   return !inline && match ? (\r\n                                                       <SyntaxHighlighter\r\n                                                           children={String(children).replace(/\\n$/, '')}\r\n                                                           style={nightOwl}\r\n                                                           customStyle={{backgroundColor:\"#2c2f48\", borderRadius:\"15px\"}}\r\n                                                           language={match[1]}\r\n                                                           PreTag=\"div\"\r\n                                                           {...props}\r\n                                                       />\r\n                                                   ) : (\r\n                                                       <code className={className} {...props}>\r\n                                                           {children}\r\n                                                       </code>\r\n                                                   )\r\n                                               }\r\n                                           }}\r\n                            />\r\n                        </div>\r\n                        <div className=\"post__main-info-views\">\r\n                            <div className=\"views\">\r\n                                <span><EyeOutlined /></span>\r\n                                <span>{post.viewsCount}</span>\r\n                            </div>\r\n                            <div className=\"comments\">\r\n                                <span><CommentOutlined /></span>\r\n                                <span>{post.commentsCount}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n\r\n            <div className=\"comments-background\">\r\n                <div className=\"post__comments\">\r\n                    <div className=\"post__comments-explanation\">\r\n                    <span>\r\n                       Комментарии\r\n                    </span>\r\n                    </div>\r\n                    {comments?.length !== 0\r\n                        ?\r\n                        comments?.map((item) =>\r\n                        <Comment\r\n                            key={item._id}\r\n                            item={item}\r\n                            bloggerId={id}\r\n                            getCommentsOfPost={getCommentsOfPost}\r\n\r\n                        />)\r\n                        :\r\n                        <div className=\"chat__block-empty\">\r\n                            <p>Тут пока никто ничего не написал.</p>\r\n                            <p>Будьте первыми!</p>\r\n                        </div>}\r\n                    <SendComment sendComment={sendComment}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n       </Scrollbar>\r\n    );\r\n};\r\n\r\nexport default PostFull;","import React, {useEffect, useState} from 'react';\r\nimport './EditSettings.scss'\r\nimport {Popover, Tooltip} from \"antd\";\r\nimport {CheckOutlined, CloseOutlined, DeleteOutlined, FormOutlined} from \"@ant-design/icons\";\r\nimport {deletePublication} from \"redux/Reducers\";\r\nimport {useAppDispatch} from \"redux/reduxStore\";\r\nimport {useNavigate} from \"react-router\";\r\nimport {checkChangePossibility} from \"utils/EditSettings/checkEditable\";\r\n\r\ntype PropsType = {\r\n    editPost: () => void\r\n    id: string\r\n    handleTooltipVisibility: (boolean: boolean) => void\r\n}\r\nconst EditSettings:React.FC<PropsType> = ({editPost, id, handleTooltipVisibility}) => {\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [visibleEditTooltip, setVisibleEditTooltip] = useState(false)\r\n    const [visibleDeleteTooltip, setVisibleDeleteTooltip] = useState(false)\r\n    const dispatch = useAppDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if(visible || visibleEditTooltip || visibleDeleteTooltip) {\r\n            handleTooltipVisibility(true)\r\n        } else handleTooltipVisibility(false)\r\n    },[visible, visibleEditTooltip, visibleDeleteTooltip])\r\n\r\n    const handleVisibleChange = (newVisible: boolean) => {\r\n        setVisibleDeleteTooltip(false)\r\n        setVisible(newVisible)\r\n    }\r\n    const hide = () => {\r\n        setVisible(false)\r\n    }\r\n    const showEditTooltip = (newVisible: boolean) => {\r\n        if(!visible) setVisibleEditTooltip(newVisible)\r\n    }\r\n    const showDeleteTooltip = (newVisible: boolean) => {\r\n        if(!visible) setVisibleDeleteTooltip(newVisible)\r\n    }\r\n    const sendDeleteDataOnServ = () => {\r\n        checkChangePossibility(id, () => {\r\n            dispatch(deletePublication(id)).then(() => {\r\n                navigate('/posts')\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"edit\">\r\n                <Tooltip mouseLeaveDelay={0.05}\r\n                         mouseEnterDelay={0.3}\r\n                         open={visibleEditTooltip}\r\n                         onOpenChange={showEditTooltip}\r\n                         title=\"Редактировать пост\"\r\n                >\r\n                    <FormOutlined onClick={editPost}/>\r\n                </Tooltip>\r\n                <Tooltip mouseLeaveDelay={0.05}\r\n                         mouseEnterDelay={0.3}\r\n                         open={visibleDeleteTooltip}\r\n                         onOpenChange={showDeleteTooltip}\r\n                         title=\"Удалить пост\">\r\n                    <Popover\r\n                        content={\r\n                            <div className=\"popover-options\">\r\n                                <div>\r\n                                    <CheckOutlined style={{color: 'red'}}/>\r\n                                    <a onClick={sendDeleteDataOnServ}>Да</a>\r\n                                </div>\r\n                                <div>\r\n                                    <CloseOutlined style={{color: '#39e324'}}/>\r\n                                    <a onClick={hide}>Нет</a>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        title=\"Вы действительно хотите удалить пост?\"\r\n                        trigger=\"click\"\r\n                        open={visible}\r\n                        onOpenChange={handleVisibleChange}\r\n                        color={\"#2c2f48\"}\r\n                        overlayClassName=\"custom-popover\"\r\n                    >\r\n                        <DeleteOutlined  />\r\n                    </Popover>\r\n                </Tooltip>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditSettings;","import React, {Fragment} from 'react';\r\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\r\nimport { enGB, eo, ru } from 'date-fns/locale'\r\nimport isToday from \"date-fns/isToday\";\r\nimport {format} from \"date-fns\";\r\n//для чата, возвращает строковое значение, когда было написано сообщение, н.п. \"меньше минуты назад\"\r\nconst locales = {enGB, eo, ru}\r\n\r\nexport const CustomTimeDistanceToNow: React.FC<{date:string}> = ({date}) => {\r\n    let parsedDate = Date.parse(date) + + 1.08e+7\r\n    return <Fragment>\r\n        Онлайн {formatDistanceToNow(parsedDate, {\r\n            addSuffix: true,\r\n            locale: locales.ru\r\n        })}\r\n    </Fragment>\r\n};\r\nexport const GetMessageTime:React.FC<{date:string, showFullDate:boolean }> = ({date, showFullDate = false}) => {\r\n    let parsedDate\r\n    if(showFullDate) {\r\n        parsedDate = Date.parse(date)\r\n    } else  parsedDate = Date.parse(date) + 1.08e+7\r\n\r\n    if(isToday(parsedDate)) {\r\n        return <Fragment>{format(parsedDate, \"Сегодня в HH:mm\")}</Fragment>\r\n    } else if(showFullDate){\r\n        return <Fragment>{format(parsedDate, \"d.MM.yyyy в HH:mm\")}</Fragment>\r\n    } else {\r\n        return <Fragment>{format(parsedDate, \"d.MM.yyyy\")}</Fragment>\r\n    }\r\n}\r\n"],"names":["TextArea","Input","item","bloggerId","getCommentsOfPost","useState","isEditableComment","editComment","value","setValue","handleDeleteComment","commentsAPI","_id","resultCode","handleEditComment","text","handleSendEditComment","console","log","editConditions","user","date","Date","now","parse","isCommentEditable","createdAt","className","src","avatarUrl","small","alt","fullName","EditOutlined","onClick","CloseOutlined","size","placeholder","autoSize","minRows","maxRows","onChange","e","target","updatedAt","showFullDate","edit","setEdit","setTooltipVisible","undefined","post","setPost","comments","setComments","scrollbarRef","useRef","id","useSelector","getBloggerID","params","useParams","state","useLocation","getPostById","postsAPI","response","data","useEffect","then","current","scrollToBottom","editPost","sendComment","title","tags","imageUrl","postHandler","currentPost","ref","original","style","display","EditSettings","handleTooltipVisibility","boolean","map","children","components","code","node","inline","props","match","exec","String","replace","nightOwl","customStyle","backgroundColor","borderRadius","language","PreTag","EyeOutlined","viewsCount","CommentOutlined","commentsCount","length","Comment","visible","setVisible","visibleEditTooltip","setVisibleEditTooltip","visibleDeleteTooltip","setVisibleDeleteTooltip","dispatch","useAppDispatch","navigate","useNavigate","mouseLeaveDelay","mouseEnterDelay","open","onOpenChange","newVisible","FormOutlined","content","CheckOutlined","color","checkChangePossibility","deletePublication","trigger","overlayClassName","DeleteOutlined","locales","enGB","eo","ru","CustomTimeDistanceToNow","parsedDate","Fragment","formatDistanceToNow","addSuffix","locale","GetMessageTime","isToday","format"],"sourceRoot":""}