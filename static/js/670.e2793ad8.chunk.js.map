{"version":3,"file":"static/js/670.e2793ad8.chunk.js","mappings":"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","sources":["utils/Time/isUserOnline.ts","pages/Dialogs/DialogItem/DialogItem.tsx","pages/Dialogs/DialogsPage/DialogHeader.tsx","pages/Dialogs/DialogsPage/DialogList.tsx","pages/Dialogs/Message/MessagesList.tsx","assets/images/readed.svg","assets/images/noreaded.svg","pages/Dialogs/Message/Message.tsx","pages/Dialogs/DialogsPage/DialogsPage.tsx","pages/Dialogs/DialogsPage/DialogsPageContainer.tsx","utils/Time/CustomTime.tsx"],"sourcesContent":["\r\nexport const isUserOnline = (date: string) => {\r\n    if(date) {\r\n        const isBeingOnlineDateLimit = 1200000\r\n        const dateDifference = Date.now() - (Date.parse(date) + 1.08e+7)\r\n        return dateDifference < isBeingOnlineDateLimit\r\n    } else {\r\n        return false\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport 'pages/Dialogs/DialogItem/DialogItem.scss'\r\nimport {CustomTimeDistanceToNow, GetMessageTime} from \"utils/Time/CustomTime\";\r\nimport {CloseOutlined, ExclamationCircleOutlined} from '@ant-design/icons';\r\nimport {useAppDispatch} from \"redux/reduxStore\";\r\nimport {handlingDialogs, handlingMessageList} from \"redux/Reducers\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getActiveMessagePage, getMessagesOnPage} from \"redux/Selectors\";\r\nimport classnames from 'classnames';\r\nimport {isUserOnline} from 'utils/Time/isUserOnline';\r\nimport {Modal, Tooltip} from \"antd\";\r\nimport {dialogsAPI} from \"api/dialogsAPI\";\r\nimport {GradientCharAvatar} from \"components/CustomAvatars\";\r\nimport {dialogActions} from \"redux/Actions\";\r\n\r\nconst { confirm } = Modal;\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n    src: string | undefined\r\n    hasNewMessages: boolean\r\n    newMessagesCount: number\r\n    date: string\r\n    activityDate: string\r\n    selectedId: number | null\r\n}\r\n\r\nexport const DialogItem: React.FC<PropsType> = React.memo(({name, id, src, hasNewMessages, newMessagesCount, date, activityDate, selectedId}) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    let activePage = useSelector(getActiveMessagePage)\r\n    let messagesOnPage = useSelector(getMessagesOnPage)\r\n    const [isShown, setIsShown] = useState<boolean>(false);\r\n\r\n\r\n    const error = () => {\r\n        Modal.error({\r\n            title: 'Невозможно удалить диалог',\r\n        });\r\n    };\r\n    const removeDialog = async () => {\r\n        error()\r\n    }\r\n\r\n    const showDeleteConfirm = () => {\r\n        confirm({\r\n            title: 'Вы уверены, что хотите удалить диалог?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: 'Восстановить сообщения будет невозможно',\r\n            okText: 'Да',\r\n            okButtonProps : {ghost : true},\r\n            okType: 'danger',\r\n            cancelText: 'Нет',\r\n            onOk() {\r\n                removeDialog()\r\n            },\r\n        });\r\n    };\r\n\r\n    const checkNewMessages = async () => {\r\n        const response =  await dialogsAPI.getNewMessages()\r\n        dispatch(dialogActions.setNumberOfNewMessages(response))\r\n    }\r\n\r\n    const getMessageList = async () => {\r\n        dispatch(handlingMessageList(id, activePage, messagesOnPage))\r\n            .then(() => dispatch(handlingDialogs()))\r\n            .then(() => checkNewMessages())\r\n        dispatch(dialogActions.setDialogID(id))\r\n    }\r\n    const deleteDialog = (e:React.MouseEvent<HTMLSpanElement>) => {\r\n        showDeleteConfirm()\r\n        e.stopPropagation()\r\n    }\r\n\r\n    return (\r\n                <div\r\n                    onMouseEnter={() => setIsShown(true)}\r\n                    onMouseLeave={() => setIsShown(false)}\r\n                    onClick={getMessageList}\r\n                    className={classnames(\"dialog__item\",\r\n                    {\r\n                        \"dialog__item--online\": isUserOnline(activityDate),\r\n                        \"dialog__item--selected\": id === selectedId\r\n                    })}>\r\n                    <div className=\"dialog__item-avatar\">\r\n                        <GradientCharAvatar avatarUrl={src as string} name={name} height={'40px'}/>\r\n                    </div>\r\n                    <div className=\"dialog__item-info\">\r\n                        <div className=\"dialog__item-info-top\">\r\n                            <b>{name}</b>\r\n                            {!isShown && <span><GetMessageTime date={date} showFullDate={false}/></span>}\r\n                            {isShown\r\n                                &&\r\n                                <Tooltip mouseLeaveDelay={0.05}\r\n                                         mouseEnterDelay={0.6}\r\n                                         title=\"Удалить диалог\"\r\n                                >\r\n                                    <CloseOutlined onClick={deleteDialog}/>\r\n                                </Tooltip>}\r\n                        </div>\r\n                        <div className=\"dialog__item-info-bottom\">\r\n                            {!isUserOnline(activityDate) && <p><CustomTimeDistanceToNow date={activityDate}/></p>}\r\n                            {isUserOnline(activityDate) && <p>В сети</p>}\r\n                            {hasNewMessages && <div className=\"dialog__item-info-bottom-count\">{newMessagesCount}</div>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    );\r\n})\r\n\r\n","import React from 'react';\r\nimport 'pages/Dialogs/DialogsPage/DialogsPage.scss'\r\nimport {DialogType} from \"typings\";\r\nimport {isUserOnline} from \"utils/Time/isUserOnline\";\r\nimport classnames from 'classnames';\r\n\r\ntype PropsType = {\r\n    dialogs: DialogType[]\r\n    id: number | null\r\n}\r\n\r\nexport const DialogHeader: React.FC<PropsType> = React.memo(({dialogs, id}) => {\r\n\r\n    if(dialogs.length && id) {\r\n        const userName = dialogs.find(dialog => dialog.id === id)\r\n        const isOnline = isUserOnline(userName!.lastUserActivityDate)\r\n\r\n    return (\r\n        <div className=\"chat__dialog-header-center\">\r\n            <b className=\"chat__dialog-header-name\">{userName?.userName}</b>\r\n            <div className=\"chat__dialog-header-status\">\r\n                 <span className={classnames(\"status\", {\"status--online\": isOnline})}>\r\n                    {isOnline ? <span>Online</span> : <span>Offline</span>}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n    } else {\r\n        return <div></div>\r\n    }\r\n})\r\n\r\n","import React from 'react';\r\nimport {DialogItem} from \"pages/Dialogs\";\r\nimport {DialogType} from \"typings\";\r\nimport {Empty} from 'antd';\r\n\r\ntype PropsType = {\r\n    dialogs: DialogType[]\r\n    filter: string\r\n    selectedId: number | null\r\n\r\n}\r\nexport const DialogList: React.FC<PropsType> = ({dialogs, filter, selectedId}) => {\r\n\r\n    const filteredDialogs = dialogs.filter(dialog => dialog.userName.toLowerCase().indexOf(filter) !== -1)\r\n    if (filteredDialogs.length === 0) {\r\n        return <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description=\"Нет диалогов\"/>\r\n    }\r\n    return (\r\n        <>\r\n            {filteredDialogs.map(n => <DialogItem name={n.userName}\r\n                                                  key={n.id}\r\n                                                  id={n.id}\r\n                                                  src={n.photos.small as string}\r\n                                                  hasNewMessages={n.hasNewMessages}\r\n                                                  newMessagesCount={n.newMessagesCount}\r\n                                                  date={n.lastDialogActivityDate}\r\n                                                  activityDate={n.lastUserActivityDate}\r\n                                                  selectedId={selectedId}\r\n\r\n            />)}\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n","import React, {Dispatch, SetStateAction, useEffect, useRef} from 'react';\r\nimport {Message} from \"pages/Dialogs\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getAuthID, getAuthAvatar,getMessageList } from \"redux/Selectors\";\r\nimport {DialogType} from \"typings\";\r\nimport {Empty} from 'antd';\r\n\r\ntype PropsType = {\r\n    dialogs: DialogType[]\r\n    id: number | null\r\n    setMessageSending: Dispatch<SetStateAction<boolean>>\r\n    isMessageSending: boolean\r\n}\r\nexport const MessagesList: React.FC<PropsType> = React.memo(({dialogs, id, setMessageSending, isMessageSending}) => {\r\n\r\n    const isMe = useSelector(getAuthID)\r\n    const authAvatar = useSelector(getAuthAvatar)\r\n    const messageList = useSelector(getMessageList)\r\n    const messagesRef = useRef<HTMLDivElement>(null)\r\n\r\n    const recipientAvatar = dialogs.find(elem => elem.id === id)?.photos.small\r\n\r\n    useEffect(() => {\r\n            messagesRef.current?.scrollIntoView(\r\n                {\r\n                    behavior: isMessageSending ? 'smooth' :'auto',\r\n                    block: 'end',\r\n                    inline: 'nearest'\r\n                })\r\n    })\r\n\r\n    useEffect(() => {\r\n            setMessageSending(false)\r\n    },[id])\r\n\r\n    if(messageList.length === 0) {\r\n        return <Empty  className=\"chat__dialog-messages-empty\" description=\"Нет сообщений\"/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {messageList.map((m) =>\r\n                <Message\r\n                    key={m.id}\r\n                    messageId={m.id}\r\n                    message={m.body}\r\n                    avatar={m.senderId === isMe ? authAvatar as string: recipientAvatar as string}\r\n                    date={m.addedAt}\r\n                    isMe={m.senderId === isMe}\r\n                    viewed={m.senderId !== isMe ? true : m.viewed}\r\n                />)}\r\n            <div ref={messagesRef}></div>\r\n        </>\r\n    );\r\n})\r\n\r\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgReaded(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 15,\n    height: 9,\n    viewBox: \"0 0 15 9\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M3.66648 6.87477L10.2103 0.139168C10.3908 -0.0463894 10.6839 -0.0463894 10.8643 0.139168C11.0452 0.324251 11.0452 0.62513 10.8643 0.810213L3.99532 7.88086C3.8167 8.06405 3.51946 8.06405 3.34084 7.88086L0.135337 4.60679C-0.0451125 4.42171 -0.0451125 4.1213 0.135337 3.93575C0.315787 3.75019 0.608904 3.75019 0.789354 3.93575L3.66648 6.87477ZM7.14111 7.06654L14.1548 0.139864C14.3479 -0.0466214 14.6616 -0.0466214 14.8548 0.139864C15.0484 0.325873 15.0484 0.628256 14.8548 0.814264L7.55877 8.13855C7.3676 8.32265 5.87166 7.56707 5.75484 7.46285C5.64238 7.36252 6.30121 6.77489 6.30121 6.77489C6.50611 6.87518 7.08691 7.12008 7.14111 7.06654Z\",\n    fill: \"#0C8FE4\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgReaded);\nexport default __webpack_public_path__ + \"static/media/readed.da3c99324b4eb3958865b24076453ba3.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgNoreaded(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 11,\n    height: 9,\n    viewBox: \"0 0 11 9\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M10.2103 0.139168L3.66648 6.87477L0.789354 3.93575C0.608904 3.75019 0.315787 3.75019 0.135337 3.93575C-0.0451125 4.1213 -0.0451125 4.42171 0.135337 4.60679L3.34084 7.88086C3.51946 8.06405 3.8167 8.06405 3.99532 7.88086L10.8643 0.810213C11.0452 0.62513 11.0452 0.324251 10.8643 0.139168C10.6839 -0.0463894 10.3908 -0.0463894 10.2103 0.139168Z\",\n    fill: \"#0C8FE4\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgNoreaded);\nexport default __webpack_public_path__ + \"static/media/noreaded.a7c0ab31b14324a6272d3bb9feae835b.svg\";\nexport { ForwardRef as ReactComponent };","import React, {FocusEventHandler, useState} from \"react\"\r\nimport 'pages/Dialogs/Message/Message.scss'\r\nimport {DeleteOutlined, ExclamationCircleOutlined, StopOutlined} from '@ant-design/icons';\r\nimport classNames from \"classnames\";\r\nimport classnames from \"classnames\";\r\nimport {GetMessageTime} from \"utils/Time/CustomTime\";\r\nimport MessageReadImage from \"assets/images/readed.svg\"\r\nimport MessageNoReadImage from \"assets/images/noreaded.svg\"\r\nimport {Modal} from \"antd\";\r\nimport {useAppDispatch} from \"redux/reduxStore\";\r\nimport {handlingDeleteMessage, handlingRestoreMessage, handlingSpamMessage} from \"redux/Reducers\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getListOfDeletedMessages} from \"redux/Selectors\";\r\nimport { SpamNotification } from \"constants/constants\";\r\n\r\nconst { confirm } = Modal;\r\n\r\ntype PropsType = {\r\n    message: string\r\n    avatar: string | null\r\n    date: string\r\n    isMe: boolean\r\n    viewed: boolean\r\n    messageId: string\r\n}\r\nexport const Message: React.FC<PropsType> = React.memo(({message, messageId, avatar, date, isMe,viewed}) => {\r\n\r\n    const [isOptionsVisible, setOptionsVisible] = useState<boolean>(false)\r\n    const [isOptionsHovered, setOptionsHovered] = useState<boolean>(false)\r\n    const listOfDeletedMessages = useSelector(getListOfDeletedMessages)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isDeleted = listOfDeletedMessages.find(item => item.messageId === messageId)\r\n    const spamMessage = message === SpamNotification\r\n\r\n    const handleOptions = () => {\r\n        setOptionsVisible(!isOptionsVisible)\r\n    }\r\n    const handleBlur:FocusEventHandler<HTMLDivElement> = (event) => {\r\n            if (!isOptionsHovered) {\r\n                setOptionsVisible(false);\r\n            }\r\n    }\r\n    const signAsSpam = async () => {\r\n        dispatch(handlingSpamMessage(messageId, message))\r\n            .then(() => setOptionsVisible(false))\r\n    }\r\n    const signAsDeleted = async () => {\r\n        dispatch(handlingDeleteMessage(messageId, message))\r\n            .then(() => setOptionsVisible(false))\r\n    }\r\n    const handleRestore = () => {\r\n        dispatch(handlingRestoreMessage(messageId, isDeleted?.message))\r\n    }\r\n    const showMarkAsSpanConfirm = () => {\r\n        confirm({\r\n            title: 'Пометить сообщение как спам?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            okText: 'Да',\r\n            okType: 'danger',\r\n            cancelText: 'Нет',\r\n            onOk() {\r\n                signAsSpam()\r\n            },\r\n            onCancel() {\r\n                setOptionsVisible(false)\r\n            },\r\n        });\r\n    };\r\n    const showDeleteConfirm = () => {\r\n        confirm({\r\n            title: 'Удалить сообщение?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            okText: 'Да',\r\n            okType: 'danger',\r\n            cancelText: 'Нет',\r\n            onOk() {\r\n                signAsDeleted()\r\n            },\r\n            onCancel() {\r\n                setOptionsVisible(false)\r\n            },\r\n        });\r\n    };\r\n    const handleSpam = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        showMarkAsSpanConfirm()\r\n    }\r\n    const handleDelete = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        showDeleteConfirm()\r\n    }\r\n\r\n    return <div className={classNames(\"message\", {\"message--isMe\": isMe})}>\r\n        <div className=\"message__content\">\r\n            <div className=\"message__content-info\">\r\n                <div className=\"message__content-info-avatar\">\r\n                    <img src={avatar as string} alt=\"User\"/>\r\n                </div>\r\n                    <div\r\n                        className={classnames(\"message__content-info-bubble\",{\"deleted-message\":isDeleted})}\r\n                        tabIndex={0}\r\n                        onClick={handleOptions}\r\n                        onBlur={handleBlur}\r\n                    >\r\n                        <p>{message}</p>\r\n                    </div>\r\n                {!isDeleted && !spamMessage\r\n                    ?\r\n                    <div className=\"message__content-info-options\">\r\n                        {isOptionsVisible\r\n                            ?\r\n                            <div className=\"deleteAndSpam\">\r\n                                {!isMe && <StopOutlined\r\n                                    onClick={handleSpam}\r\n                                    onMouseEnter={() => setOptionsHovered(true)}\r\n                                    onMouseLeave={() => setOptionsHovered(false)}\r\n                                />}\r\n                                <DeleteOutlined\r\n                                    onClick={handleDelete}\r\n                                    onMouseEnter={() => setOptionsHovered(true)}\r\n                                    onMouseLeave={() => setOptionsHovered(false)}/>\r\n                            </div>\r\n                            :\r\n                            <div></div>}\r\n                        {viewed && !isOptionsVisible && <img src={MessageReadImage} alt=\"\"/>}\r\n                        {!viewed && !isOptionsVisible && <img src={MessageNoReadImage} alt=\"\"/>}\r\n                    </div>\r\n                    :\r\n                    <span className=\"spam-restore\" onClick={handleRestore}>Восстановить</span>}\r\n            </div>\r\n            <div className=\"message__content-date\">\r\n                <GetMessageTime date={date} showFullDate={false}/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import React, {useEffect, useState} from \"react\"\r\nimport {DialogType, SelfPrivateMessageType} from \"typings\";\r\nimport {handlingDialogs, handlingMessageList, ThunkDialogType} from \"redux/Reducers\";\r\nimport {Empty} from 'antd'\r\nimport {EllipsisOutlined, TeamOutlined} from '@ant-design/icons';\r\nimport 'pages/Dialogs/DialogItem/DialogItem.scss'\r\nimport {useSelector} from \"react-redux\";\r\nimport {useAppDispatch} from \"redux/reduxStore\";\r\nimport {getActiveMessagePage, getMessagesOnPage} from \"redux/Selectors\";\r\nimport \"pages/Dialogs/DialogsPage/DialogsPage.scss\"\r\nimport {SendMessageForm} from \"components/FormikInput/SendMessageForm\";\r\nimport {DialogList, MessagesList,DialogHeader} from \"pages/Dialogs\";\r\nimport {StyledSearch} from \"components/Forms\";\r\nimport {dialogActions} from \"redux/Actions\";\r\n\r\n\r\ntype PropsType = {\r\n    dialogs: Array<DialogType>\r\n    privateMessageData: Array<SelfPrivateMessageType>\r\n    handlingMessage: (id: number, body: string) => ThunkDialogType\r\n    userID: number | null\r\n}\r\n\r\nconst DialogsPage: React.FC<PropsType> = React.memo(({dialogs, privateMessageData,  handlingMessage, userID}) => {\r\n\r\n    let id = userID\r\n    let activePage = useSelector(getActiveMessagePage)\r\n    let messagesOnPage = useSelector(getMessagesOnPage)\r\n    const [isMessageSending, setMessageSending] = useState(false)\r\n    const [filter, setFilter] = useState('')\r\n    const dispatch = useAppDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(handlingDialogs())\r\n        dispatch(dialogActions.setRedirectToDialogPage(false))\r\n        return () => {\r\n            dispatch(dialogActions.clearDialogList())\r\n            dispatch(dialogActions.setDialogID(null))\r\n            dispatch(dialogActions.setRedirectToDialogPage(false))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(id) dispatch(handlingMessageList(id, activePage,messagesOnPage))\r\n    }, [privateMessageData])\r\n\r\n    const sendMessage = (value:string) => {\r\n        setMessageSending(true)\r\n        handlingMessage(id as number, value)\r\n    }\r\n\r\n    const handleSetFilter = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n        setFilter(e.target.value)\r\n    }\r\n\r\n    return <section className=\"home\">\r\n        <div className=\"chat\">\r\n            <div className=\"chat__sidebar\">\r\n                <div className=\"chat__sidebar-header\">\r\n                    <div>\r\n                        <TeamOutlined />\r\n                        <span>Список диалогов</span>\r\n                    </div>\r\n                    <div></div>\r\n                </div>\r\n                <div className=\"chat__sidebar-search\">\r\n                    <StyledSearch  handleSetFilter={handleSetFilter}/>\r\n                </div>\r\n                <div className=\"chat__sidebar-list\">\r\n                    <DialogList selectedId={id} dialogs={dialogs} filter={filter} />\r\n                </div>\r\n            </div>\r\n            <div className=\"chat__dialog\">\r\n                <div className=\"chat__dialog-header\">\r\n                    <DialogHeader dialogs={dialogs} id={id}/>\r\n                </div>\r\n                <div className=\"chat__dialog-messages\">\r\n                    {userID &&\r\n                        <MessagesList\r\n                            dialogs={dialogs}\r\n                            id={id}\r\n                            setMessageSending={setMessageSending}\r\n                            isMessageSending={isMessageSending}/>}\r\n                    {!userID && <Empty className=\"chat__dialog-messages-empty\" description=\"Выберите диалог\"/>}\r\n                </div>\r\n                <div className=\"chat__dialog-input\">\r\n                    {userID && <SendMessageForm sendMessage={sendMessage}/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n})\r\n\r\nexport default DialogsPage","import {DialogsPage} from \"pages/Dialogs\";\r\nimport { handlingMessage, ThunkDialogType} from \"redux/Reducers\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRedirectIfNoAuth} from \"components/HOC\";\r\nimport {compose} from \"redux\";\r\nimport {getCurrentDialogID, getDialogs, getFriendsIsFetching, getPrivateMessageData,} from \"redux/Selectors\";\r\nimport {AppStateType} from \"redux/reduxStore\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {dialogActions} from \"redux/Actions\";\r\nimport { FriendFilterType } from \"typings\";\r\n\r\n\r\ntype OwnPropsType = {\r\n    router: any\r\n}\r\ntype StatePropsDialogType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsDialogType = {\r\n    handlingFriends: (activePage:number,usersOnPage:number, filter:FriendFilterType) => ThunkDialogType\r\n    handlingMessage: (id: number, body: string) => ThunkDialogType\r\n}\r\ntype PropsType = StatePropsDialogType & DispatchPropsDialogType & OwnPropsType\r\n\r\nconst DialogsPageContainer: React.FC<PropsType> = React.memo(({ privateMessageData, dialogs, handlingMessage, dialogID}) => {\r\n\r\n\r\n    return <DialogsPage dialogs={dialogs}\r\n                        privateMessageData={privateMessageData}\r\n                        handlingMessage={handlingMessage}\r\n                        userID={dialogID}\r\n     />\r\n})\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        privateMessageData: getPrivateMessageData(state),\r\n        dialogs: getDialogs(state),\r\n        isFetching: getFriendsIsFetching(state),\r\n        dialogID: getCurrentDialogID(state),\r\n    }\r\n}\r\n\r\nconst sendNewMessage = dialogActions.sendNewMessage\r\n\r\nexport default compose<ComponentType>(\r\n    connect<StatePropsDialogType, {}, OwnPropsType, AppStateType>(mapStateToProps, {sendNewMessage, handlingMessage}),\r\n    withRedirectIfNoAuth,\r\n)(DialogsPageContainer)\r\n\r\n","import React, {Fragment} from 'react';\r\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\r\nimport { enGB, eo, ru } from 'date-fns/locale'\r\nimport isToday from \"date-fns/isToday\";\r\nimport {format} from \"date-fns\";\r\n//для чата, возвращает строковое значение, когда было написано сообщение, н.п. \"меньше минуты назад\"\r\nconst locales = {enGB, eo, ru}\r\n\r\nexport const CustomTimeDistanceToNow: React.FC<{date:string}> = ({date}) => {\r\n    let parsedDate = Date.parse(date) + + 1.08e+7\r\n    return <Fragment>\r\n        Онлайн {formatDistanceToNow(parsedDate, {\r\n            addSuffix: true,\r\n            locale: locales.ru\r\n        })}\r\n    </Fragment>\r\n};\r\nexport const GetMessageTime:React.FC<{date:string, showFullDate:boolean }> = ({date, showFullDate = false}) => {\r\n    let parsedDate\r\n    if(showFullDate) {\r\n        parsedDate = Date.parse(date)\r\n    } else  parsedDate = Date.parse(date) + 1.08e+7\r\n\r\n    if(isToday(parsedDate)) {\r\n        return <Fragment>{format(parsedDate, \"Сегодня в HH:mm\")}</Fragment>\r\n    } else if(showFullDate){\r\n        return <Fragment>{format(parsedDate, \"d.MM.yyyy в HH:mm\")}</Fragment>\r\n    } else {\r\n        return <Fragment>{format(parsedDate, \"d.MM.yyyy\")}</Fragment>\r\n    }\r\n}\r\n"],"names":["isUserOnline","date","Date","now","parse","confirm","Modal","DialogItem","React","name","id","src","hasNewMessages","newMessagesCount","activityDate","selectedId","dispatch","useAppDispatch","activePage","useSelector","getActiveMessagePage","messagesOnPage","getMessagesOnPage","useState","isShown","setIsShown","removeDialog","title","checkNewMessages","dialogsAPI","response","dialogActions","getMessageList","handlingMessageList","then","handlingDialogs","onMouseEnter","onMouseLeave","onClick","className","classnames","avatarUrl","height","showFullDate","mouseLeaveDelay","mouseEnterDelay","CloseOutlined","e","icon","ExclamationCircleOutlined","content","okText","okButtonProps","ghost","okType","cancelText","onOk","stopPropagation","CustomTime","C","DialogHeader","dialogs","length","userName","find","dialog","isOnline","lastUserActivityDate","DialogList","filter","filteredDialogs","toLowerCase","indexOf","image","Empty","description","map","n","photos","small","lastDialogActivityDate","MessagesList","setMessageSending","isMessageSending","isMe","getAuthID","authAvatar","getAuthAvatar","messageList","messagesRef","useRef","recipientAvatar","elem","useEffect","current","scrollIntoView","behavior","block","inline","m","messageId","message","body","avatar","senderId","addedAt","viewed","ref","Message","isOptionsVisible","setOptionsVisible","isOptionsHovered","setOptionsHovered","listOfDeletedMessages","getListOfDeletedMessages","isDeleted","item","spamMessage","SpamNotification","signAsSpam","handlingSpamMessage","signAsDeleted","handlingDeleteMessage","classNames","alt","tabIndex","onBlur","event","handlingRestoreMessage","StopOutlined","onCancel","DeleteOutlined","MessageReadImage","MessageNoReadImage","privateMessageData","handlingMessage","userID","setFilter","TeamOutlined","handleSetFilter","target","value","SendMessageForm","sendMessage","DialogsPageContainer","dialogID","sendNewMessage","compose","connect","state","getPrivateMessageData","getDialogs","isFetching","getFriendsIsFetching","getCurrentDialogID","withRedirectIfNoAuth","locales","enGB","eo","ru","CustomTimeDistanceToNow","parsedDate","Fragment","formatDistanceToNow","addSuffix","locale","GetMessageTime","isToday","format"],"sourceRoot":""}